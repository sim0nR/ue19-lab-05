# Déclencheurs du workflow :
# Ce workflow se déclenche automatiquement lorsqu'un push est effectué sur la branche main.
on:
  push:
    branches:
      - main

jobs:
  push_to_registries:
    # Nom du workflow : ce nom sera affiché dans l'interface GitHub Actions.
    name: Build, Scan and Push Docker Image
    # Spécifie l'environnement d'exécution : ici, une machine virtuelle Ubuntu.
    runs-on: ubuntu-latest

    # Permissions nécessaires pour publier sur GitHub Packages.
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write

    steps:
      # Étape 1 : Récupère le code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Docker Buildx pour des fonctionnalités avancées.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Docker Buildx est une extension de Docker qui permet de construire des images optimisées (multi-plateformes, parallélisation, etc.).


      # Étape 3 : Connexion au registre Docker GitHub Container Registry (ghcr.io).
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # - registry : spécifie l'adresse du registre Docker (ici, GitHub Container Registry).
          # - username : utilise l'identifiant de l'utilisateur qui déclenche l'action.

            # Étape 4 : Construire l'image Docker et la pousser dans le registre.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Définit le répertoire courant comme contexte de construction Docker (là où se trouve le Dockerfile).
          push: true # Indique que l'image doit être poussée automatiquement après la construction.
          tags: ghcr.io/sim0nr/ue19-lab-05
          # Spécifie le nom et le tag de l'image Docker :
          # - ghcr.io/sim0nr/ue19-lab-05 : chemin vers le registre.

      # Étape 5 : Vérification de l'image Docker pour les vulnérabilités
      - name: Analyze Docker image with Trivy
        uses: aquasecurity/trivy-action@master # Utilise l'outil Trivy pour détecter les failles de sécurité
        with:
          image-ref: ghcr.io/sim0nr/ue19-lab-05 # Référence de l'image Docker à scanner
